<?php
// $Header: /cvsroot/html2ps/encoding.symbol.inc.php,v 1.4 2007/01/24 18:56:00 Konstantin Exp $

$GLOBALS['g_symbol'] = array(
"\x20" => 0x0020,	// SPACE	// space
"\x20" => 0X00A0,	// NO-BREAK SPACE	// space
"\x21" => 0x0021,	// EXCLAMATION MARK	// exclam
"\x22" => 0x2200,	// FOR ALL	// universal
"\x23" => 0x0023,	// NUMBER SIGN	// numbersign
"\x24" => 0x2203,	// THERE EXISTS	// existential
"\x25" => 0x0025,	// PERCENT SIGN	// percent
"\x26" => 0x0026,	// AMPERSAND	// ampersand
"\x27" => 0X220B,	// CONTAINS AS MEMBER	// suchthat
"\x28" => 0x0028,	// LEFT PARENTHESIS	// parenleft
"\x29" => 0x0029,	// RIGHT PARENTHESIS	// parenright
"\x2A" => 0X2217,	// ASTERISK OPERATOR	// asteriskmath
"\x2B" => 0X002B,	// PLUS SIGN	// plus
"\x2C" => 0X002C,	// COMMA	// comma
"\x2D" => 0X2212,	// MINUS SIGN	// minus
"\x2E" => 0X002E,	// FULL STOP	// period
"\x2F" => 0X002F,	// SOLIDUS	// slash
"\x30" => 0x0030,	// DIGIT ZERO	// zero
"\x31" => 0x0031,	// DIGIT ONE	// one
"\x32" => 0x0032,	// DIGIT TWO	// two
"\x33" => 0x0033,	// DIGIT THREE	// three
"\x34" => 0x0034,	// DIGIT FOUR	// four
"\x35" => 0x0035,	// DIGIT FIVE	// five
"\x36" => 0x0036,	// DIGIT SIX	// six
"\x37" => 0x0037,	// DIGIT SEVEN	// seven
"\x38" => 0x0038,	// DIGIT EIGHT	// eight
"\x39" => 0x0039,	// DIGIT NINE	// nine
"\x3A" => 0X003A,	// COLON	// colon
"\x3B" => 0X003B,	// SEMICOLON	// semicolon
"\x3C" => 0X003C,	// LESS-THAN SIGN	// less
"\x3D" => 0X003D,	// EQUALS SIGN	// equal
"\x3E" => 0X003E,	// GREATER-THAN SIGN	// greater
"\x3F" => 0X003F,	// QUESTION MARK	// question
"\x40" => 0x2245,	// APPROXIMATELY EQUAL TO	// congruent
"\x41" => 0x0391,	// GREEK CAPITAL LETTER ALPHA	// Alpha
"\x42" => 0x0392,	// GREEK CAPITAL LETTER BETA	// Beta
"\x43" => 0X03A7,	// GREEK CAPITAL LETTER CHI	// Chi
"\x44" => 0x0394,	// GREEK CAPITAL LETTER DELTA	// Delta
"\x44" => 0x2206,	// INCREMENT	// Delta
"\x45" => 0x0395,	// GREEK CAPITAL LETTER EPSILON	// Epsilon
"\x46" => 0X03A6,	// GREEK CAPITAL LETTER PHI	// Phi
"\x47" => 0x0393,	// GREEK CAPITAL LETTER GAMMA	// Gamma
"\x48" => 0x0397,	// GREEK CAPITAL LETTER ETA	// Eta
"\x49" => 0x0399,	// GREEK CAPITAL LETTER IOTA	// Iota
"\x4A" => 0X03D1,	// GREEK THETA SYMBOL	// theta1
"\x4B" => 0X039A,	// GREEK CAPITAL LETTER KAPPA	// Kappa
"\x4C" => 0X039B,	// GREEK CAPITAL LETTER LAMDA	// Lambda
"\x4D" => 0X039C,	// GREEK CAPITAL LETTER MU	// Mu
"\x4E" => 0X039D,	// GREEK CAPITAL LETTER NU	// Nu
"\x4F" => 0X039F,	// GREEK CAPITAL LETTER OMICRON	// Omicron
"\x50" => 0X03A0,	// GREEK CAPITAL LETTER PI	// Pi
"\x51" => 0x0398,	// GREEK CAPITAL LETTER THETA	// Theta
"\x52" => 0X03A1,	// GREEK CAPITAL LETTER RHO	// Rho
"\x53" => 0X03A3,	// GREEK CAPITAL LETTER SIGMA	// Sigma
"\x54" => 0X03A4,	// GREEK CAPITAL LETTER TAU	// Tau
"\x55" => 0X03A5,	// GREEK CAPITAL LETTER UPSILON	// Upsilon
"\x56" => 0X03C2,	// GREEK SMALL LETTER FINAL SIGMA	// sigma1
"\x57" => 0X03A9,	// GREEK CAPITAL LETTER OMEGA	// Omega
"\x57" => 0x2126,	// OHM SIGN	// Omega
"\x58" => 0X039E,	// GREEK CAPITAL LETTER XI	// Xi
"\x59" => 0X03A8,	// GREEK CAPITAL LETTER PSI	// Psi
"\x5A" => 0X0396,	// GREEK CAPITAL LETTER ZETA	// Zeta
"\x5B" => 0X005B,	// LEFT SQUARE BRACKET	// bracketleft
"\x5C" => 0X2234,	// THEREFORE	// therefore
"\x5D" => 0X005D,	// RIGHT SQUARE BRACKET	// bracketright
"\x5E" => 0X22A5,	// UP TACK	// perpendicular
"\x5F" => 0X005F,	// LOW LINE	// underscore
"\x60" => 0XF8E5,	// RADICAL EXTENDER	// radicalex (CUS)
"\x61" => 0X03B1,	// GREEK SMALL LETTER ALPHA	// alpha
"\x62" => 0X03B2,	// GREEK SMALL LETTER BETA	// beta
"\x63" => 0X03C7,	// GREEK SMALL LETTER CHI	// chi
"\x64" => 0X03B4,	// GREEK SMALL LETTER DELTA	// delta
"\x65" => 0X03B5,	// GREEK SMALL LETTER EPSILON	// epsilon
"\x66" => 0X03C6,	// GREEK SMALL LETTER PHI	// phi
"\x67" => 0X03B3,	// GREEK SMALL LETTER GAMMA	// gamma
"\x68" => 0X03B7,	// GREEK SMALL LETTER ETA	// eta
"\x69" => 0X03B9,	// GREEK SMALL LETTER IOTA	// iota
"\x6A" => 0X03D5,	// GREEK PHI SYMBOL	// phi1
"\x6B" => 0X03BA,	// GREEK SMALL LETTER KAPPA	// kappa
"\x6C" => 0X03BB,	// GREEK SMALL LETTER LAMDA	// lambda
"\x6D" => 0X00B5,	// MICRO SIGN	// mu
"\x6D" => 0X03BC,	// GREEK SMALL LETTER MU	// mu
"\x6E" => 0X03BD,	// GREEK SMALL LETTER NU	// nu
"\x6F" => 0X03BF,	// GREEK SMALL LETTER OMICRON	// omicron
"\x70" => 0X03C0,	// GREEK SMALL LETTER PI	// pi
"\x71" => 0X03B8,	// GREEK SMALL LETTER THETA	// theta
"\x72" => 0X03C1,	// GREEK SMALL LETTER RHO	// rho
"\x73" => 0X03C3,	// GREEK SMALL LETTER SIGMA	// sigma
"\x74" => 0X03C4,	// GREEK SMALL LETTER TAU	// tau
"\x75" => 0X03C5,	// GREEK SMALL LETTER UPSILON	// upsilon
"\x76" => 0X03D6,	// GREEK PI SYMBOL	// omega1
"\x77" => 0X03C9,	// GREEK SMALL LETTER OMEGA	// omega
"\x78" => 0X03BE,	// GREEK SMALL LETTER XI	// xi
"\x79" => 0X03C8,	// GREEK SMALL LETTER PSI	// psi
"\x7A" => 0X03B6,	// GREEK SMALL LETTER ZETA	// zeta
"\x7B" => 0X007B,	// LEFT CURLY BRACKET	// braceleft
"\x7C" => 0X007C,	// VERTICAL LINE	// bar
"\x7D" => 0X007D,	// RIGHT CURLY BRACKET	// braceright
"\x7E" => 0X223C,	// TILDE OPERATOR	// similar
"\xA0" => 0X20AC,	// EURO SIGN	// Euro
"\xA1" => 0X03D2,	// GREEK UPSILON WITH HOOK SYMBOL	// Upsilon1
"\xA2" => 0x2032,	// PRIME	// minute
"\xA3" => 0x2264,	// LESS-THAN OR EQUAL TO	// lessequal
"\xA4" => 0x2044,	// FRACTION SLASH	// fraction
"\xA4" => 0x2215,	// DIVISION SLASH	// fraction
"\xA5" => 0X221E,	// INFINITY	// infinity
"\xA6" => 0x0192,	// LATIN SMALL LETTER F WITH HOOK	// florin
"\xA7" => 0x2663,	// BLACK CLUB SUIT	// club
"\xA8" => 0x2666,	// BLACK DIAMOND SUIT	// diamond
"\xA9" => 0x2665,	// BLACK HEART SUIT	// heart
"\xAA" => 0X2660,	// BLACK SPADE SUIT	// spade
"\xAB" => 0X2194,	// LEFT RIGHT ARROW	// arrowboth
"\xAC" => 0X2190,	// LEFTWARDS ARROW	// arrowleft
"\xAD" => 0X2191,	// UPWARDS ARROW	// arrowup
"\xAE" => 0X2192,	// RIGHTWARDS ARROW	// arrowright
"\xAF" => 0X2193,	// DOWNWARDS ARROW	// arrowdown
"\xB0" => 0X00B0,	// DEGREE SIGN	// degree
"\xB1" => 0X00B1,	// PLUS-MINUS SIGN	// plusminus
"\xB2" => 0x2033,	// DOUBLE PRIME	// second
"\xB3" => 0x2265,	// GREATER-THAN OR EQUAL TO	// greaterequal
"\xB4" => 0X00D7,	// MULTIPLICATION SIGN	// multiply
"\xB5" => 0X221D,	// PROPORTIONAL TO	// proportional
"\xB6" => 0x2202,	// PARTIAL DIFFERENTIAL	// partialdiff
"\xB7" => 0x2022,	// BULLET	// bullet
"\xB8" => 0X00F7,	// DIVISION SIGN	// divide
"\xB9" => 0x2260,	// NOT EQUAL TO	// notequal
"\xBA" => 0X2261,	// IDENTICAL TO	// equivalence
"\xBB" => 0X2248,	// ALMOST EQUAL TO	// approxequal
"\xBC" => 0X2026,	// HORIZONTAL ELLIPSIS	// ellipsis
"\xBD" => 0XF8E6,	// VERTICAL ARROW EXTENDER	// arrowvertex (CUS)
"\xBE" => 0XF8E7,	// HORIZONTAL ARROW EXTENDER	// arrowhorizex (CUS)
"\xBF" => 0X21B5,	// DOWNWARDS ARROW WITH CORNER LEFTWARDS	// carriagereturn
"\xC0" => 0x2135,	// ALEF SYMBOL	// aleph
"\xC1" => 0x2111,	// BLACK-LETTER CAPITAL I	// Ifraktur
"\xC2" => 0X211C,	// BLACK-LETTER CAPITAL R	// Rfraktur
"\xC3" => 0x2118,	// SCRIPT CAPITAL P	// weierstrass
"\xC4" => 0x2297,	// CIRCLED TIMES	// circlemultiply
"\xC5" => 0x2295,	// CIRCLED PLUS	// circleplus
"\xC6" => 0x2205,	// EMPTY SET	// emptyset
"\xC7" => 0x2229,	// INTERSECTION	// intersection
"\xC8" => 0X222A,	// UNION	// union
"\xC9" => 0x2283,	// SUPERSET OF	// propersuperset
"\xCA" => 0X2287,	// SUPERSET OF OR EQUAL TO	// reflexsuperset
"\xCB" => 0X2284,	// NOT A SUBSET OF	// notsubset
"\xCC" => 0X2282,	// SUBSET OF	// propersubset
"\xCD" => 0X2286,	// SUBSET OF OR EQUAL TO	// reflexsubset
"\xCE" => 0X2208,	// ELEMENT OF	// element
"\xCF" => 0X2209,	// NOT AN ELEMENT OF	// notelement
"\xD0" => 0x2220,	// ANGLE	// angle
"\xD1" => 0x2207,	// NABLA	// gradient
"\xD2" => 0XF6DA,	// REGISTERED SIGN SERIF	// registerserif (CUS)
"\xD3" => 0XF6D9,	// COPYRIGHT SIGN SERIF	// copyrightserif (CUS)
"\xD4" => 0XF6DB,	// TRADE MARK SIGN SERIF	// trademarkserif (CUS)
"\xD5" => 0X220F,	// N-ARY PRODUCT	// product
"\xD6" => 0X221A,	// SQUARE ROOT	// radical
"\xD7" => 0X22C5,	// DOT OPERATOR	// dotmath
"\xD8" => 0X00AC,	// NOT SIGN	// logicalnot
"\xD9" => 0x2227,	// LOGICAL AND	// logicaland
"\xDA" => 0X2228,	// LOGICAL OR	// logicalor
"\xDB" => 0X21D4,	// LEFT RIGHT DOUBLE ARROW	// arrowdblboth
"\xDC" => 0X21D0,	// LEFTWARDS DOUBLE ARROW	// arrowdblleft
"\xDD" => 0X21D1,	// UPWARDS DOUBLE ARROW	// arrowdblup
"\xDE" => 0X21D2,	// RIGHTWARDS DOUBLE ARROW	// arrowdblright
"\xDF" => 0X21D3,	// DOWNWARDS DOUBLE ARROW	// arrowdbldown
"\xE0" => 0X25CA,	// LOZENGE	// lozenge
"\xE1" => 0x2329,	// LEFT-POINTING ANGLE BRACKET	// angleleft
"\xE2" => 0XF8E8,	// REGISTERED SIGN SANS SERIF	// registersans (CUS)
"\xE3" => 0XF8E9,	// COPYRIGHT SIGN SANS SERIF	// copyrightsans (CUS)
"\xE4" => 0XF8EA,	// TRADE MARK SIGN SANS SERIF	// trademarksans (CUS)
"\xE5" => 0x2211,	// N-ARY SUMMATION	// summation
"\xE6" => 0XF8EB,	// LEFT PAREN TOP	// parenlefttp (CUS)
"\xE7" => 0XF8EC,	// LEFT PAREN EXTENDER	// parenleftex (CUS)
"\xE8" => 0XF8ED,	// LEFT PAREN BOTTOM	// parenleftbt (CUS)
"\xE9" => 0XF8EE,	// LEFT SQUARE BRACKET TOP	// bracketlefttp (CUS)
"\xEA" => 0XF8EF,	// LEFT SQUARE BRACKET EXTENDER	// bracketleftex (CUS)
"\xEB" => 0XF8F0,	// LEFT SQUARE BRACKET BOTTOM	// bracketleftbt (CUS)
"\xEC" => 0XF8F1,	// LEFT CURLY BRACKET TOP	// bracelefttp (CUS)
"\xED" => 0XF8F2,	// LEFT CURLY BRACKET MID	// braceleftmid (CUS)
"\xEE" => 0XF8F3,	// LEFT CURLY BRACKET BOTTOM	// braceleftbt (CUS)
"\xEF" => 0XF8F4,	// CURLY BRACKET EXTENDER	// braceex (CUS)
"\xF1" => 0X232A,	// RIGHT-POINTING ANGLE BRACKET	// angleright
"\xF2" => 0X222B,	// INTEGRAL	// integral
"\xF3" => 0x2320,	// TOP HALF INTEGRAL	// integraltp
"\xF4" => 0XF8F5,	// INTEGRAL EXTENDER	// integralex (CUS)
"\xF5" => 0x2321,	// BOTTOM HALF INTEGRAL	// integralbt
"\xF6" => 0XF8F6,	// RIGHT PAREN TOP	// parenrighttp (CUS)
"\xF7" => 0XF8F7,	// RIGHT PAREN EXTENDER	// parenrightex (CUS)
"\xF8" => 0XF8F8,	// RIGHT PAREN BOTTOM	// parenrightbt (CUS)
"\xF9" => 0XF8F9,	// RIGHT SQUARE BRACKET TOP	// bracketrighttp (CUS)
"\xFA" => 0XF8FA,	// RIGHT SQUARE BRACKET EXTENDER	// bracketrightex (CUS)
"\xFB" => 0XF8FB,	// RIGHT SQUARE BRACKET BOTTOM	// bracketrightbt (CUS)
"\xFC" => 0XF8FC,	// RIGHT CURLY BRACKET TOP	// bracerighttp (CUS)
"\xFD" => 0XF8FD,	// RIGHT CURLY BRACKET MID	// bracerightmid (CUS)
"\xFE" => 0XF8FE,	// RIGHT CURLY BRACKET BOTTOM	// bracerightbt (CUS)
)
?>